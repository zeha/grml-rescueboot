#!/bin/sh
# Filename:      42_grml
# Purpose:       grub-mkconfig helper script for Grml rescue systems
# Authors:       Grml team (grml.org), (c) Andreas Gredler <jimmy@grml.org>, Michael Prokop <mika@grml.org>
# License:       This file is licensed under the GPL v2+.
################################################################################
# shellcheck shell=dash

set -e

prefix=/usr
exec_prefix=${prefix}
libdir=${exec_prefix}/lib

if [ -r "${libdir}/grub/grub-mkconfig_lib" ] ; then
  # shellcheck disable=SC1091
  . "${libdir}/grub/grub-mkconfig_lib"
elif [ -r /usr/share/grub/grub-mkconfig_lib ] ; then # fallback for e.g. Fedora
  # shellcheck disable=SC1091
  . /usr/share/grub/grub-mkconfig_lib
else
  echo "Could not locate file grub-mkconfig_lib, please report a bug." >&2
fi

# default unless configured otherwise:
ISO_LOCATION="/boot/grml"

if [ -r /etc/default/grml-rescueboot ] ; then
  # shellcheck disable=SC1091
  . /etc/default/grml-rescueboot
fi

resolve_dm_name() {
  retval="$1"
  base=${1##*/}
  for block in /sys/block /sys/class/block ; do
    [ ! -d "${block}/${base}/dm" ] && continue
    retval="/dev/mapper/$(cat "${block}/${base}/dm/name")"
    break
  done
  case "$retval" in
    /dev/dm-*)
    minor=${retval##*-}
   retval="/dev/mapper/$(dmsetup info -C --noheadings -o name -j 253 -m "$minor")"
    ;;
  esac

  echo "$retval"
}

get_dependencies() {
  device=${1}
  if [ -z "${device}" ] ; then
    return
  fi
  device=$(readlink -f "${device}")
  case "$device" in
    /dev/mapper/*)
    device="/dev/dm-$(dmsetup info -C --noheadings -o minor "$device")"
    ;;
  esac

  base=${device##*/}
  dependencies=""
  additional_dependencies=""
  for block in /sys/block /sys/class/block ; do
    [ ! -d "${block}/${base}/slaves" ] && continue
    for file in  "${block}/${base}"/slaves/* ; do
      dep_name="/dev/${file##*/}"
      dep_name=$(resolve_dm_name "${dep_name}")

      # resolve recursively all dependencies
      additional_dependencies=$(get_dependencies "${dep_name}")

      dependencies="$dependencies $additional_dependencies $dep_name"
    done
    break
  done
  echo "$dependencies"
}

get_iso_identifier() {
  local iso="$1"
  local id=
  if isoinfo --version >/dev/null 2>&1 ; then
    id=$(isoinfo -d -i "${iso}" | grep '^Volume id:' | sed -e 's/^[^:]*: *//')
    [ -n "${id}" ] || id=$(isoinfo -d -i "${iso}" | grep '^Application id:' | sed -e 's/^[^:]*: *//')
  fi
  echo "${id}"
}

iso_list=""
for file in "${ISO_LOCATION}"/*.iso ; do
     if grub_file_is_not_garbage "$file" ; then
       iso_list="$iso_list $file "
     fi
done

indent='        '
submenu_indent=
if [ -n "${GRUB_SUBMENU}" ] && [ -n "${iso_list}" ] ; then
  echo "submenu \"${GRUB_SUBMENU}\" \$menuentry_id_option \"grml-rescueboot\" {"
  submenu_indent="${indent}"
fi

for grmliso in $iso_list ; do
  rel_dirname="$(dirname "$(make_system_path_relative_to_its_root "$grmliso")")"
  grml="$(basename "$grmliso")"
  # shellcheck disable=SC2154 # grub_probe is defined by grub-mkconfig_lib
  device="$("${grub_probe}" -t device "${grmliso}")"

  additional_param=""

  case "$device" in
    /dev/mapper*|/dev/md*)
      dependencies=$(get_dependencies "${device}")
      dep_string=""
      for dep in $dependencies $device ; do
        case "$dep" in
          /dev/md*)
          md_name="$(mdadm --detail --export "$dep" | sed -ne 's/MD_NAME=//p')"
          dep="/dev/md/$md_name"
        esac
        dep_string="$dep_string,$dep"
      done
      dep_string=${dep_string#,}
      additional_param="live-media=$dep_string"
    ;;
  esac

  echo "Found grml-rescueboot ISO image: ${grmliso}" >&2
  iso_id=$(get_iso_identifier "${grmliso}")
  if [ -n "${iso_id}" ] ; then
    title="${iso_id} (${grml})"
  else
    title="${grml}"
  fi
  grub_prep=$(prepare_grub_to_access_device "${device}" | sed -e "s/^/${indent}/")
  grub_iso_path="${rel_dirname%/}/${grml}"

  sed -e "s/^/${submenu_indent}/" << EOF
menuentry "${title}" {
${grub_prep}
        iso_path="${grub_iso_path}"
        export iso_path
        kernelopts=" $CUSTOM_BOOTOPTIONS $additional_param "
        export kernelopts
        # support booting recent GRUB versions on UEFI systems
        # (see bugs.debian.org/959425)
        rmmod tpm
        loopback loop "\$iso_path"
        set root=(loop)
        configfile /boot/grub/loopback.cfg
        unset root
        loopback -d loop
        unset iso_path
        unset kernelopts
}
EOF
done

if [ -n "${GRUB_SUBMENU}" ] && [ -n "${iso_list}" ] ; then
  echo "} # end submenu \"${GRUB_SUBMENU}\""
fi

## END OF FILE #################################################################
